#! /bin/sh

PROGRAM="${0##*/}"

alias -- '---'='service'
alias -- 'kind:'='kind'
alias -- 'metadata:'='metadata'
alias -- 'spec:'='spec'
alias -- 'description:'='description'
alias -- 'name:'='name'
alias -- 'queryZone:'='zone'
alias -- 'type:'='type'

usage() {
	cat <<- EOT
	usage: $PROGRAM -h | -f<file> <host>[,<host>...] [-o<field>:<value>:<value>]
	EOT
	exit
}

truncate() {
	[ ${#2} -gt $1 ] && {
		sed "s/\(.\{$(($1 - 1))\}\).*/\1>/" <<< "$2"
	} || {
		sed "s/\(.\{$1\}\).*/\1/" <<< "$2"
	}
}

response_address() {
	IFS=. read O1 O2 O3 O4 <<< "$1"
	dig IN A +short "$O4.$O3.$O2.$O1.$SPEC_ZONE"
}

response_address_text() {
	IFS=. read O1 O2 O3 O4 <<< "$1"
	dig IN TXT +short "$O4.$O3.$O2.$O1.$SPEC_ZONE" |
	sed 's/^"//;s/"$//'
}

response_domain() {
	dig IN A +short "$1.$SPEC_ZONE"
}

response_domain_text() {
	IFS=. read O1 O2 O3 O4 <<< "$1"
	dig IN TXT +short "$1.$SPEC_ZONE" |
	sed 's/^"//;s/"$//'
}

report() {
	printf -- '%-23s ' "$(truncate 23 "$1")"
	printf -- '%-15s ' "$(truncate 15 "$2")"
	case "$3" in
		'BlackholeList')
			printf -- '%-15s ' "$(truncate 15 "${OKIND[0]:-$3}")"
			;;
		'BlockList')
			printf -- '%-15s ' "$(truncate 15 "${OKIND[1]:-$3}")"
			;;
		'BlackList')
			printf -- '%-15s ' "$(truncate 15 "${OKIND[2]:-$3}")"
			;;
		'InformativeList')
			printf -- '%-15s ' "$(truncate 15 "${OKIND[3]:-$3}")"
			;;
		'InformationalList')
			printf -- '%-15s ' "$(truncate 15 "${OKIND[4]:-$3}")"
			;;
		'ReputationList')
			printf -- '%-15s ' "$(truncate 15 "${OKIND[5]:-$3}")"
			;;
		*)
			printf -- '%-15s ' "$(truncate 15 "$3")"
			;;
	esac
	printf -- '%-15s ' "$(truncate 15 "$4")"
	printf -- '%-07s ' "$(truncate 07 "$5")"
	printf -- '%-15s ' "$(truncate 15 "$6")"
	printf -- '\n'
	[ "$7" ] && {
		t="$(tr '\n' ' ' <<< "$7" |tr -d '\r')"
		printf -- '% 23s %-72s\n' '->' "$(truncate 72 "$t")"
	}
}

report_header() {
	{
		printf -- '%-23s ' 'HOST'
		printf -- '%-15s ' 'TYPE'
		printf -- '%-15s ' 'KIND'
		printf -- '%-15s ' 'NAME'
		printf -- '%-07s ' 'STATUS'
		printf -- '%-15s ' 'RESPONSE'
		printf -- '\n'
	} |
	sed '
	{
		s/^/\x1b[46;37;1m/
		s/$/\x1b[m/
	}'
}

service() {
	[ "$KIND" -a "$METADATA_NAME" -a "$SPEC_ZONE" ] && {
		case "$HOST" in
		*.[0-9]*)
			ADDRESSES=( $HOST )
			;;
		?*)
			case $SPEC_TYPE in
			'Address')
				ADDRESSES=( $(dig IN A +short $HOST) )
				;;
			'Domain')
				ADDRESSES=( $HOST )
				;;
			esac
			;;
		esac
		for ADDRESS in ${ADDRESSES[@]}; do
			case $SPEC_TYPE in
			'Address')
				RESPONSE=$(response_address $ADDRESS)
				RESPONSE_TEXT=$(response_address_text $ADDRESS)
				;;
			'Domain')
				RESPONSE=$(response_domain $ADDRESS)
				RESPONSE_TEXT=$(response_domain_text $ADDRESS)
				;;
			esac
			case "$RESPONSE" in
			'127.0.'?*)
				STATUS='Listed'
				;;
			'')
				STATUS='Clean'
				;;
			?*)
				STATUS='Unknown'
				;;
			esac
			report "$HOST" "$SPEC_TYPE" "$KIND" "$METADATA_NAME" "$STATUS" "$RESPONSE" "$RESPONSE_TEXT" |
			case "$STATUS" in
			'Listed')
				case "$KIND" in
				'InformativeList' | 'InformationalList')
					sed '
					1{
						s/^/\x1b[44;37m/
						s/$/\x1b[m/
					}
					2{
						s/^/\x1b[44;32m/
						s/$/\x1b[m/
					}'
					;;
				'ReputationList')
					sed '
					{
						s/^/\x1b[43;30m/
						s/$/\x1b[m/
					}'
					;;
				'BlackholeList' | 'BlockList' | 'BlackList')
					sed '
					{
						s/^/\x1b[41;37m/
						s/$/\x1b[m/
					}'
					;;
				esac
				;;
			*)
				sed '
				{
					s/^/\x1b[47;30m/
					s/$/\x1b[m/
				}'
				;;
			esac
		done
	}
	SPEC_TYPE=$SPEC_TYPE_DEFAULT
	unset NODE
	unset KIND
	unset METADATA_DESCRIPTION
	unset METADATA_NAME
	unset SPEC_ZONE
}

kind() {
	KIND="$@"
}

metadata() {
	NODE='METADATA'
}

spec() {
	NODE='SPEC'
}

description() {
	case "$NODE" in
	'METADATA')
		METADATA_DESCRIPTION="$@"
		;;
	esac
}
name() {
	case "$NODE" in
	'METADATA')
		METADATA_NAME="$@"
		;;
	esac
}

zone() {
	case "$NODE" in
	'SPEC')
		SPEC_ZONE="$@"
		;;
	esac
}

type() {
	case "$NODE" in
	'SPEC')
		SPEC_TYPE="$@"
		;;
	esac
}

error() {
	printf -- '%s: %s\n' "$PROGRAM" "$@" >&2
	exit 1
}

while [ $# -gt 0 ]; do
	OPTION="$1"
	case "$OPTION" in
	'-f'*)
		case "$OPTION" in
		'-f'?*)
			FILES=( ${FILES[@]} ${OPTION#-f} )
			;;
		*)
			shift
			[ $# -lt 1 ] && error 'option -f requires an argument'
			FILES=( ${FILES[@]} $1 )
			;;
		esac
		;;
	'-o'*)
		case "$OPTION" in
		'-okind:BlackholeList:'?*)
			OKIND[0]="${OPTION#-okind:BlackholeList:}"
			;;
		'-okind:BlockList:'?*)
			OKIND[1]="${OPTION#-okind:BlockList:}"
			;;
		'-okind:BlackList:'?*)
			OKIND[2]="${OPTION#-okind:BlackList:}"
			;;
		'-okind:InformativeList:'?*)
			OKIND[3]="${OPTION#-okind:InformativeList:}"
			;;
		'-okind:InformationalList:'?*)
			OKIND[4]="${OPTION#-okind:InformationalList:}"
			;;
		'-okind:ReputationList:'?*)
			OKIND[5]="${OPTION#-okind:ReputationList:}"
			;;
		'-okind'*)
			error 'option -o requires an argument'
			;;
		*)
			shift
			[ $# -lt 1 ] && error 'option -o requires an argument'
			case "$1" in
			'kind:BlackholeList:'?*)
				OKIND[0]="${1#kind:BlackholeList:}"
				;;
			'kind:BlockList:'?*)
				OKIND[1]="${1#kind:BlockList:}"
				;;
			'kind:BlackList:'?*)
				OKIND[2]="${1#kind:BlackList:}"
				;;
			'kind:InformativeList:'?*)
				OKIND[3]="${1#kind:InformativeList:}"
				;;
			'kind:InformationalList:'?*)
				OKIND[4]="${1#kind:InformationalList:}"
				;;
			'kind:ReputationList:'?*)
				OKIND[5]="${1#kind:ReputationList:}"
				;;
			esac
		esac
		;;
	'-h')
		usage
		;;
	?*)
		case "$OPTION" in
		*','*)
			HOSTS=( ${HOSTS[@]} ${OPTION//,/ } )
			;;
		*)
			HOSTS=( ${HOSTS[@]} $OPTION )
			;;
		esac 
		;;
	esac
	shift
done

[ ${#FILES[@]} -eq 0 ] && error 'source file(s) required; use: -f<file>'
[ ${#HOSTS[@]} -eq 0 ] && error 'host(s) required; use: <host>[,<host>...]'

SPEC_TYPE_DEFAULT='Address'
SPEC_TYPE=$SPEC_TYPE_DEFAULT

for HOST in ${HOSTS[@]}; do
	report_header
	for FILE in ${FILES[@]}; do
		source "$PWD/$FILE"
	done
	service
	printf -- '\n'
done
